'''
Made By Katsero. Sorry for Russian in code, too lazy to translate, let's say you have a translator, right? My apologies

Any way, here is a code that helps to get all wanted soul parts from tree (If you have same ADHD and perfectionism trait).
First list is made if trees and amount of slots you're going to use. Prefereble NOT to touch it, here is my minimal distribution tree (all branches in order from upper one - Illumination).
High use of warps and skips to get all wisdoms to level 9, yet you can still fill unused slots in process.

Optimised restribution
0 1 1 0 0 0 1 1 1 
0 0 0 1 1 1 1 1 1
0 0 0 1 1 1 1 1 1
0 0 0 0 1 1 1 1 1
0 1 0 1 1 1 1 1 1
1 0 1 1 1 1 1 1 1
0 0 0 0 1 1 1 1 1
1 1 1 1 1 1 1 1 1
1 1 0 0 1 1 1 1 1

Next ones are skills you want to obtain from attaching all skills to slots. Preferable is  setting everything to 8 (and you can except the ones obtained from start as I did for Architect)
Keep in mind that you only have 73 skills. If summary of soul parts is more you'll never get the result. And the more hard task might take more time or may not be resultative (Got one of mine on attempt 439402)

Next one is list of skills. All skills | first tree | soul part from first tree | sec tree | sec SP

You can change amount of attempts on line
'distribution = distribute_skills(tries=1000000)'
If you really need perfect result for ALL 73 skills, lol

That's it. If anyone dares to translate it, my respect to your contribution, comrade
'''

from collections import defaultdict, Counter
import random

# Минимум по ветвям (сколько минимум навыков должно быть вложено)
min_branch_skills = {
    "Просветление": 5,
    "Исихастика": 6,
    "Никтодромия": 6,
    "Сколекософия": 5,
    "Пуща": 7,
    "Сохранение": 8,
    "Птичья песнь": 5,
    "Горомахия": 9,
    "Итастрия": 7
}

# Всегда 9 слотов на ветвь
total_branch_slots = {branch: 9 for branch in min_branch_skills}

# Минимум по частям души (важнее всего)
min_soul_parts = {
    "Вист": 7,
    "Здоровье": 7,
    "Решимость": 8,
    "Трист": 7,
    "Фет": 8,
    "Фост": 8,
    "Хор": 8,
    "Шапт": 6,
    "Эреб": 8
}

# Список навыков (вставь сюда свой список)
skills = [
    ("Чернила удержания", "Горомахия", "Решимость", "Сохранение", "Здоровье"),
    ("Эдикты нерушимые", "Горомахия", "Решимость", "Сохранение", "Хор"),
    ("Эдикты воинствующие", "Горомахия", "Решимость", "Просветление", "Фост"),
    ("Таинства Непокорённого Солнца", "Горомахия", "Фет", "Просветление", "Фост"),
    ("Двери и стены", "Горомахия", "Фет", "Никтодромия", "Шапт"),
    ("Колокола и жаровни", "Горомахия", "Решимость", "Итастрия", "Вист"),
    ("Яшма и яхонт", "Горомахия", "Фет", "Итастрия", "Фост"),
    ("Чернила власти", "Горомахия", "Решимость", "Исихастика", "Трист"),
    ("Таинства порогов", "Горомахия", "Решимость", "Исихастика", "Трист"),
    ("Ураноскопия", "Горомахия", "Фет", "Исихастика", "Трист"),
    ("Великие знаки и великие шрамы", "Горомахия", "Фет", "Итастрия", "Фост"),
    ("Глубинный мандейский", "Горомахия", "Решимость", "Итастрия", "Фост"),
    ("Операции и кровопускания", "Исихастика", "Вист", "Сохранение", "Хор"),
    ("Моровые мистерии", "Исихастика", "Трист", "Сохранение", "Здоровье"),
    ("Угасание и утешение", "Исихастика", "Трист", "Сохранение", "Здоровье"),
    ("Клинки", "Исихастика", "Вист", "Сколекософия", "Шапт"),
    ("Гады и яды", "Исихастика", "Трист", "Сколекософия", "Шапт"),
    ("Наука шрамов", "Исихастика", "Трист", "Просветление", "Фост"),
    ("Чувства и зрелища", "Исихастика", "Вист", "Никтодромия", "Фет"),
    ("Стёкла и сосуды", "Исихастика", "Вист", "Итастрия", "Фост"),
    ("Чернила откровения", "Исихастика", "Вист", "Итастрия", "Фост"),
    ("Эрикапейский", "Исихастика", "Трист", "Просветление", "Фост"),
    ("Фуцинский", "Исихастика", "Трист", "Итастрия", "Вист"),
    ("Швы и плетения", "Итастрия", "Вист", "Сохранение", "Хор"),
    ("Часовые и замочные механизмы", "Итастрия", "Вист", "Сколекософия", "Шапт"),
    ("Растворения и разделения", "Итастрия", "Вист", "Сколекософия", "Шапт"),
    ("Разложение и гниение", "Итастрия", "Вист", "Сколекософия", "Эреб"),
    ("Серп и затмение", "Никтодромия", "Шапт", "Сохранение", "Хор"),
    ("Эдикты граничные", "Никтодромия", "Фет", "Сколекософия", "Эреб"),
    ("Витки и впадины", "Никтодромия", "Шапт", "Сколекософия", "Эреб"),
    ("Гиксосский", "Никтодромия", "Шапт", "Сколекософия", "Эреб"),
    ("Размышления Менискаты", "Просветление", "Фост", "Сохранение", "Здоровье"),
    ("Рваные распутья", "Просветление", "Фост", "Сколекософия", "Шапт"),
    ("Наука молота", "Просветление", "Решимость", "Никтодромия", "Шапт"),
    ("Рассветные размышления", "Просветление", "Фост", "Никтодромия", "Фет"),
    ("Парадоксы Дозорного", "Просветление", "Фост", "Никтодромия", "Фет"),
    ("Пироглифы", "Просветление", "Решимость", "Итастрия", "Вист"),
    ("Рамы и витражи", "Просветление", "Решимость", "Итастрия", "Фост"),
    ("Очищение и возвышение", "Просветление", "Решимость", "Итастрия", "Фост"),
    ("Преображения и высвобождения", "Просветление", "Решимость", "Итастрия", "Фост"),
    ("Подсознательный ритм", "Просветление", "Фост", "Итастрия", "Вист"),
    ("Крактрак", "Просветление", "Фост", "Сохранение", "Хор"),
    ("Каменные рассказы", "Птичья песнь", "Трист", "Сохранение", "Хор"),
    ("Холмы и лощины", "Птичья песнь", "Хор", "Сохранение", "Здоровье"),
    ("Пустынные рассказы", "Птичья песнь", "Трист", "Сколекософия", "Шапт"),
    ("Палинодии и поминовения", "Птичья песнь", "Трист", "Сколекософия", "Эреб"),
    ("Волчьи рассказы", "Птичья песнь", "Трист", "Сколекософия", "Эреб"),
    ("Покровы и предтечи", "Птичья песнь", "Хор", "Сколекософия", "Эреб"),
    ("Листья и тернии", "Птичья песнь", "Хор", "Пуща", "Здоровье"),
    ("Узлы и нити", "Птичья песнь", "Хор", "Пуща", "Здоровье"),
    ("Путь и паломник", "Птичья песнь", "Хор", "Никтодромия", "Фет"),
    ("Морские рассказы", "Птичья песнь", "Хор", "Никтодромия", "Шапт"),
    ("Струны и песни", "Птичья песнь", "Хор", "Никтодромия", "Шапт"),
    ("Снежные рассказы", "Птичья песнь", "Трист", "Исихастика", "Вист"),
    ("Небесные рассказы", "Птичья песнь", "Трист", "Горомахия", "Фет"),
    ("Рамсундский", "Птичья песнь", "Трист", "Сохранение", "Хор"),
    ("Сабазийский", "Птичья песнь", "Трист", "Горомахия", "Фет"),
    ("Вач", "Птичья песнь", "Хор", "Никтодромия", "Фет"),
    ("Явления и знамения", "Пуща", "Здоровье", "Сохранение", "Хор"),
    ("Травы и настойки", "Пуща", "Эреб", "Сохранение", "Здоровье"),
    ("Обряды корней", "Пуща", "Эреб", "Сохранение", "Здоровье"),
    ("Таинства Тройственного узла", "Пуща", "Эреб", "Сохранение", "Здоровье"),
    ("Рога и бивни", "Пуща", "Эреб", "Сколекософия", "Шапт"),
    ("Орхидеи и наркотики", "Пуща", "Эреб", "Сколекософия", "Шапт"),
    ("Дары Светлой Яблони", "Пуща", "Эреб", "Просветление", "Решимость"),
    ("Шкуры и перья", "Пуща", "Здоровье", "Никтодромия", "Фет"),
    ("Прилив и жемчуг", "Пуща", "Здоровье", "Никтодромия", "Фет"),
    ("Насекомые и нектары", "Пуща", "Эреб", "Никтодромия", "Фет"),
    ("Пряности и приправы", "Пуща", "Здоровье", "Итастрия", "Вист"),
    ("Барабаны и пляски", "Пуща", "Здоровье", "Горомахия", "Решимость"),
    ("Искушения и исчезновения", "Пуща", "Эреб", "Горомахия", "Решимость"),
    ("Хенавек", "Пуща", "Здоровье", "Итастрия", "Вист"),
    ("Килласими", "Пуща", "Здоровье", "Сколекософия", "Эреб")
]

def is_valid_solution(soul_counter, branch_counter):
    """Проверяет, удовлетворяет ли решение всем условиям"""
    soul_ok = all(soul_counter.get(part, 0) >= min_soul_parts[part] for part in min_soul_parts)
    branch_ok = all(branch_counter.get(branch, 0) >= min_branch_skills[branch] for branch in min_branch_skills)
    return soul_ok and branch_ok

def distribute_skills(tries=1000000):
    print("Ищем идеальное решение...")
    for attempt in range(1, tries + 1):
        branch_counter = defaultdict(int)
        soul_counter = Counter()
        result = defaultdict(list)
        assigned = set()

        # Перемешиваем навыки
        shuffled_skills = random.sample(skills, len(skills))

        for skill in shuffled_skills:
            name, b1, s1, b2, s2 = skill
            if name in assigned:
                continue

            options = []
            if branch_counter[b1] < total_branch_slots[b1]:
                options.append((b1, s1))
            if branch_counter[b2] < total_branch_slots[b2]:
                options.append((b2, s2))

            if not options:
                continue

            # Сортировка по приоритету: сначала те, что помогают добрать недостающие части души
            def priority(opt):
                branch, soul = opt
                if soul_counter[soul] < min_soul_parts[soul]:
                    return 0
                else:
                    return 1

            options.sort(key=priority)

            chosen_branch, chosen_soul = options[0]
            result[chosen_branch].append(name)
            branch_counter[chosen_branch] += 1
            soul_counter[chosen_soul] += 1
            assigned.add(name)

        # Проверяем, подходит ли это решение
        if is_valid_solution(soul_counter, branch_counter) and len(assigned) == len(skills):
            print(f"\nНайдено идеальное решение на попытке {attempt}")
            print("Получено частей души:")
            for soul, count in soul_counter.items():
                print(f"{soul}: {count} (минимум: {min_soul_parts[soul]})")
            print("\nЗаполнение ветвей:")
            for branch, count in branch_counter.items():
                print(f"{branch}: {count} (минимум: {min_branch_skills[branch]})")
            return result

        if attempt % 1000 == 0:
            print(f"Попытка {attempt}... пока не нашли подходящее распределение")

    print("\nНе удалось найти подходящее распределение за заданное число попыток.")
    return None

distribution = distribute_skills(tries=1000000)

if distribution:
    print("\nРаспределение по ветвям:")
    for branch, skills_list in distribution.items():
        print(f"\n{branch}")
        for skill in skills_list:
            print(f"- {skill}")
else:
    print("Не удалось найти подходящее распределение.")
